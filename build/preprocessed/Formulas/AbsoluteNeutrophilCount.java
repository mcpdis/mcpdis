/*
 * AbsoluteNeutrophilCount.java
 *
 * Created on March 7, 2006, 9:44 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;
/**
 *
 * @author user
 */
public class AbsoluteNeutrophilCount extends MIDlet
        implements  javax.microedition.lcdui.CommandListener, 
                    javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of AbsoluteNeutrophilCount */
    public AbsoluteNeutrophilCount() {
    }
    
    private Persistence.FormulaValue get_formulaValue() {
        return new Persistence.FormulaValue("Absolute Neutrophil Count [c/mm3]", get_ancResults().getText());
    }
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_ancForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == ancForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | ancForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            } else if (command == saveCommand) {
// For adding user code into this block, select "Design | Screens | ancForm [Form] | Assigned Commands | saveCommand" item in the inspector and invoke property editor on Action property in Properties window.
                Persistence.PatientSuiteDispatcher.invokePatientSuite(this, get_ancForm(), get_formulaValue());
            }
        }
    }
    
    /**
     * This method returns instance for ancForm component and should be called instead of accessing ancForm field directly.
     * @return Instance for ancForm component
     **/
    private javax.microedition.lcdui.Form get_ancForm() {
        if (ancForm == null) {
            ancForm = new javax.microedition.lcdui.Form("Absolute Neutrophil Count", new javax.microedition.lcdui.Item[] {
                get_totalWBC(),
                        get_polys(),
                        get_bands(),
                        get_ancResults()
            });
            ancForm.addCommand(get_backCommand1());
            ancForm.addCommand(get_saveCommand());
            ancForm.setCommandListener(this);
        }
        return ancForm;
    }
    
    /**
     * This method returns instance for itemCommand1 component and should be called instead of accessing itemCommand1 field directly.
     * @return Instance for itemCommand1 component
     **/
    private javax.microedition.lcdui.Command get_itemCommand1() {
        if (itemCommand1 == null) {
            itemCommand1 = new javax.microedition.lcdui.Command("Item", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return itemCommand1;
    }
    
    /**
     * This method returns instance for totalWBC component and should be called instead of accessing totalWBC field directly.
     * @return Instance for totalWBC component
     **/
    private javax.microedition.lcdui.TextField get_totalWBC() {
        if (totalWBC == null) {
            totalWBC = new javax.microedition.lcdui.TextField("Total WBC [c/mm3]", "", 20, 0x0);
        }
        return totalWBC;
    }
    
    /**
     * This method returns instance for polys component and should be called instead of accessing polys field directly.
     * @return Instance for polys component
     **/
    private javax.microedition.lcdui.TextField get_polys() {
        if (polys == null) {
            polys = new javax.microedition.lcdui.TextField("Polys [%]", null, 20, 0x0);
        }
        return polys;
    }
    
    /**
     * This method returns instance for bands component and should be called instead of accessing bands field directly.
     * @return Instance for bands component
     **/
    private javax.microedition.lcdui.TextField get_bands() {
        if (bands == null) {
            bands = new javax.microedition.lcdui.TextField("Bands [%]", null, 20, 0x0);
        }
        return bands;
    }
    
    /**
     * This method returns instance for ancResults component and should be called instead of accessing ancResults field directly.
     * @return Instance for ancResults component
     **/
    private javax.microedition.lcdui.StringItem get_ancResults() {
        if (ancResults == null) {
            ancResults = new javax.microedition.lcdui.StringItem("A.N.C. [c/mm3] =", "");
        }
        return ancResults;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for saveCommand component and should be called instead of accessing saveCommand field directly.
     * @return Instance for saveCommand component
     **/
    private javax.microedition.lcdui.Command get_saveCommand() {
        if (saveCommand == null) {
            saveCommand = new javax.microedition.lcdui.Command("Save", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return saveCommand;
    }
    
    javax.microedition.lcdui.Form ancForm;
    javax.microedition.lcdui.Command itemCommand1;
    javax.microedition.lcdui.TextField totalWBC;
    javax.microedition.lcdui.TextField polys;
    javax.microedition.lcdui.TextField bands;
    javax.microedition.lcdui.StringItem ancResults;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.Command saveCommand;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_ancForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        if (!allItemsValid()) {
            get_ancResults().setText("<all fields must be filled and valid>");
        } else {
            Double wbc = new Double(get_totalWBC().getString());
            String polys = get_polys().getString();
            String bands = get_bands().getString();
            INumeric results = wbc.mul(new Double(polys).add(bands).toString());

            get_ancResults().setText(results.toString());
        }
    }
    
    private boolean allItemsValid() {
        try {
            MicroDouble.parseDouble(get_totalWBC().getString());
            MicroDouble.parseDouble(get_polys().getString());
            MicroDouble.parseDouble(get_bands().getString());
            return true;
        } catch (Exception e) {
            return false;
        } 
    }
    
}
