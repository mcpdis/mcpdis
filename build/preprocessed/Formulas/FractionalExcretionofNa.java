/*
 * FractionalExcretionofNa.java
 *
 * Created on March 8, 2006, 4:36 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;
/**
 *
 * @author user
 */
public class FractionalExcretionofNa extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of FractionalExcretionofNa */
    public FractionalExcretionofNa() {
    }

    private Persistence.FormulaValue get_formulaValue() {
        return new Persistence.FormulaValue("Fractional Excretion of Na", get_result().getText());
    }
    
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_feNaForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == feNaForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | feNaForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            } else if (command == saveCommand) {
// For adding user code into this block, select "Design | Screens | feNaForm [Form] | Assigned Commands | saveCommand" item in the inspector and invoke property editor on Action property in Properties window.
                Persistence.PatientSuiteDispatcher.invoke(this, get_feNaForm(), get_formulaValue());
            }
        }
    }
    
    /**
     * This method returns instance for feNaForm component and should be called instead of accessing feNaForm field directly.
     * @return Instance for feNaForm component
     **/
    private javax.microedition.lcdui.Form get_feNaForm() {
        if (feNaForm == null) {
            feNaForm = new javax.microedition.lcdui.Form("Fractional excretion of Na", new javax.microedition.lcdui.Item[] {
                get_plNa(),
                        get_plCreat(),
                        get_uNa(),
                        get_uCreat(),
                        get_result()
            });
            feNaForm.addCommand(get_backCommand1());
            feNaForm.addCommand(get_saveCommand());
            feNaForm.setCommandListener(this);
        }
        return feNaForm;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for plNa component and should be called instead of accessing plNa field directly.
     * @return Instance for plNa component
     **/
    private javax.microedition.lcdui.TextField get_plNa() {
        if (plNa == null) {
            plNa = new javax.microedition.lcdui.TextField("Pl Na [mmol/L]", "", 20, 0x0);
        }
        return plNa;
    }
    
    /**
     * This method returns instance for plCreat component and should be called instead of accessing plCreat field directly.
     * @return Instance for plCreat component
     **/
    private javax.microedition.lcdui.TextField get_plCreat() {
        if (plCreat == null) {
            plCreat = new javax.microedition.lcdui.TextField("Pl Creat [mg/dL]", "", 20, 0x0);
        }
        return plCreat;
    }
    
    /**
     * This method returns instance for uNa component and should be called instead of accessing uNa field directly.
     * @return Instance for uNa component
     **/
    private javax.microedition.lcdui.TextField get_uNa() {
        if (uNa == null) {
            uNa = new javax.microedition.lcdui.TextField("U Na [mmol/L]", "", 20, 0x0);
        }
        return uNa;
    }
    
    /**
     * This method returns instance for uCreat component and should be called instead of accessing uCreat field directly.
     * @return Instance for uCreat component
     **/
    private javax.microedition.lcdui.TextField get_uCreat() {
        if (uCreat == null) {
            uCreat = new javax.microedition.lcdui.TextField("U Creat [mg/dL]", "", 20, 0x0);
        }
        return uCreat;
    }
    
    /**
     * This method returns instance for result component and should be called instead of accessing result field directly.
     * @return Instance for result component
     **/
    private javax.microedition.lcdui.StringItem get_result() {
        if (result == null) {
            result = new javax.microedition.lcdui.StringItem("F.E. Na = ", "");
        }
        return result;
    }
    
    /**
     * This method returns instance for saveCommand component and should be called instead of accessing saveCommand field directly.
     * @return Instance for saveCommand component
     **/
    private javax.microedition.lcdui.Command get_saveCommand() {
        if (saveCommand == null) {
            saveCommand = new javax.microedition.lcdui.Command("Save", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return saveCommand;
    }
    
    javax.microedition.lcdui.Form feNaForm;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.TextField plNa;
    javax.microedition.lcdui.TextField plCreat;
    javax.microedition.lcdui.TextField uNa;
    javax.microedition.lcdui.TextField uCreat;
    javax.microedition.lcdui.StringItem result;
    javax.microedition.lcdui.Command saveCommand;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_feNaForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        if (!allItemsValid()) {
            get_result().setText("<all fields must be non empty and valid>");
        } else {
            String uNa = get_uNa().getString();
            String plNa = get_plNa().getString();
            String plCreat = get_plCreat().getString();
            String uCreat = get_uCreat().getString();
            
            INumeric numerator = new Float(uNa).mul(plCreat);
            INumeric denominator = new Float(plNa).mul(uCreat);
                    
            get_result().setText(numerator.div(denominator).mul("100").format(2) + " %");
        }
    }
    
    private boolean allItemsValid() {
        try {
            MicroFloat.parseFloat(get_plNa().getString());
            MicroFloat.parseFloat(get_plCreat().getString());
            MicroFloat.parseFloat(get_uNa().getString());
            MicroFloat.parseFloat(get_uCreat().getString());
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
