/*
 * O2TransportParameters.java
 *
 * Created on March 9, 2006, 6:27 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;
/**
 *
 * @author user
 */
public class O2TransportParameters extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    private static final String[] RESULT_LABELS = {
        "C(a-v)O2 [mL %] = ",
        "CaO2 [mL %] = ",
        "CvO2 [mL %] = ",
        "DO2 [mL/min] = ",
        "VO2 [mL/min] = ",
        "OZER [%] = "
    };
    
    /** Creates a new instance of O2TransportParameters */
    public O2TransportParameters() {
    }
    
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_o2tpForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == o2tpForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | o2tpForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            }
        }
    }
    
    /**
     * This method returns instance for o2tpForm component and should be called instead of accessing o2tpForm field directly.
     * @return Instance for o2tpForm component
     **/
    private javax.microedition.lcdui.Form get_o2tpForm() {
        if (o2tpForm == null) {
            o2tpForm = new javax.microedition.lcdui.Form("O2 Transport parameters", new javax.microedition.lcdui.Item[] {
                get_type(),
                        get_hb(),
                        get_saO2(),
                        get_svO2(),
                        get_paO2(),
                        get_pvo2(),
                        get_cardiacOutput(),
                        get_result()
            });
            o2tpForm.addCommand(get_backCommand1());
            o2tpForm.setCommandListener(this);
        }
        return o2tpForm;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for hb component and should be called instead of accessing hb field directly.
     * @return Instance for hb component
     **/
    private javax.microedition.lcdui.TextField get_hb() {
        if (hb == null) {
            hb = new javax.microedition.lcdui.TextField("Hb [g/dL]", "", 20, 0x0);
        }
        return hb;
    }
    
    /**
     * This method returns instance for saO2 component and should be called instead of accessing saO2 field directly.
     * @return Instance for saO2 component
     **/
    private javax.microedition.lcdui.TextField get_saO2() {
        if (saO2 == null) {
            saO2 = new javax.microedition.lcdui.TextField("SaO2 [%]", "", 20, 0x0);
        }
        return saO2;
    }
    
    /**
     * This method returns instance for svO2 component and should be called instead of accessing svO2 field directly.
     * @return Instance for svO2 component
     **/
    private javax.microedition.lcdui.TextField get_svO2() {
        if (svO2 == null) {
            svO2 = new javax.microedition.lcdui.TextField("SvO2 [%]", "", 20, 0x0);
        }
        return svO2;
    }
    
    /**
     * This method returns instance for paO2 component and should be called instead of accessing paO2 field directly.
     * @return Instance for paO2 component
     **/
    private javax.microedition.lcdui.TextField get_paO2() {
        if (paO2 == null) {
            paO2 = new javax.microedition.lcdui.TextField("PaO2 [mmHg]", "", 20, 0x0);
        }
        return paO2;
    }
    
    /**
     * This method returns instance for pvo2 component and should be called instead of accessing pvo2 field directly.
     * @return Instance for pvo2 component
     **/
    private javax.microedition.lcdui.TextField get_pvo2() {
        if (pvo2 == null) {
            pvo2 = new javax.microedition.lcdui.TextField("PvO2 [mmHg]", "", 20, 0x0);
        }
        return pvo2;
    }
    
    /**
     * This method returns instance for result component and should be called instead of accessing result field directly.
     * @return Instance for result component
     **/
    private javax.microedition.lcdui.StringItem get_result() {
        if (result == null) {
            result = new javax.microedition.lcdui.StringItem("C(a-v)O2 [mL %] =", "");
        }
        return result;
    }
    
    /**
     * This method returns instance for type component and should be called instead of accessing type field directly.
     * @return Instance for type component
     **/
    private javax.microedition.lcdui.ChoiceGroup get_type() {
        if (type == null) {
            type = new javax.microedition.lcdui.ChoiceGroup("Type", javax.microedition.lcdui.Choice.EXCLUSIVE, new java.lang.String[] {
                "C(a-v)O2",
                        "CaO2",
                        "CvO2",
                        "DO2",
                        "VO2",
                        "OZER"
            }, new javax.microedition.lcdui.Image[] {
                null,
                        null,
                        null,
                        null,
                        null,
                        null
            });
            type.setSelectedFlags(new boolean[] {
                true,
                        false,
                        false,
                        false,
                        false,
                        false
            });
        }
        return type;
    }
    
    /**
     * This method returns instance for cardiacOutput component and should be called instead of accessing cardiacOutput field directly.
     * @return Instance for cardiacOutput component
     **/
    private javax.microedition.lcdui.TextField get_cardiacOutput() {
        if (cardiacOutput == null) {
            cardiacOutput = new javax.microedition.lcdui.TextField("Cardiac Output [L/min]", "", 20, 0x0);
        }
        return cardiacOutput;
    }
    
    javax.microedition.lcdui.Form o2tpForm;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.TextField hb;
    javax.microedition.lcdui.TextField saO2;
    javax.microedition.lcdui.TextField svO2;
    javax.microedition.lcdui.TextField paO2;
    javax.microedition.lcdui.TextField pvo2;
    javax.microedition.lcdui.StringItem result;
    javax.microedition.lcdui.ChoiceGroup type;
    javax.microedition.lcdui.TextField cardiacOutput;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_o2tpForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        if (!allItemsValid()) {
            get_result().setText("<all items must be non-empty and valid>");
        } else {
            INumeric ans;
            switch (get_type().getSelectedIndex()) {
                // C(a-v)O2
                case 1 :
                    ans = getCaO2();
                    break;
                case 2 :
                    ans = getCvO2();
                    break;
                case 3 :
                    ans = getDO2();
                    break;
                case 4 :
                    ans = getVO2();
                    break;
                case 5 :
                    ans = getERO2();
                    break;
                default :
                    ans = getCavO2();
                    break;

            }
            get_result().setLabel(RESULT_LABELS[get_type().getSelectedIndex()]);
            get_result().setText(ans.format(2));
        }
    }
    
    private INumeric getCvO2() {
        String svo2 = get_svO2().getString();
        String pvo2 = get_pvo2().getString();
        String hb = get_hb().getString();
        
        INumeric addend1 = new Float("1.34").mul(hb).mul(svo2);
        INumeric addend2 = new Float("0.003").mul(pvo2);
        
        return addend1.add(addend2);
    }
    
    private INumeric getCaO2() {
        String sao2 = get_saO2().getString();
        String pao2 = get_paO2().getString();
        String hb = get_hb().getString();
        
        INumeric addend1 = new Float("1.34").mul(hb).mul(sao2);
        INumeric addend2 = new Float("0.003").mul(pao2);
        
        return addend1.add(addend2);
    }
    
    private INumeric getCavO2() {
        return getCaO2().sub(getCvO2());
    }
    
    private INumeric getERO2() {
        return getCavO2().div(getCaO2());
    }
    
    private INumeric getDO2() {
        String co = get_cardiacOutput().getString();
        return new Float("10").mul(co).mul(getCaO2());
    }
    
    private INumeric getVO2() {
        String co = get_cardiacOutput().getString();
        return new Float("10").mul(co).mul(getCavO2());
    }
    
    private boolean allItemsValid() {
        try {
            MicroFloat.parseFloat(get_hb().getString());
            MicroFloat.parseFloat(get_saO2().getString());
            MicroFloat.parseFloat(get_svO2().getString());
            MicroFloat.parseFloat(get_paO2().getString());
            MicroFloat.parseFloat(get_pvo2().getString());
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
