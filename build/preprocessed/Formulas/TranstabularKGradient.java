/*
 * TranstabularKGradient.java
 *
 * Created on March 11, 2006, 4:40 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;
/**
 *
 * @author user
 */
public class TranstabularKGradient extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of TranstabularKGradient */
    public TranstabularKGradient() {
    }
    
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_transKGradForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == transKGradForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | transKGradForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            }
        }
    }
    
    /**
     * This method returns instance for transKGradForm component and should be called instead of accessing transKGradForm field directly.
     * @return Instance for transKGradForm component
     **/
    private javax.microedition.lcdui.Form get_transKGradForm() {
        if (transKGradForm == null) {
            transKGradForm = new javax.microedition.lcdui.Form("Transtabular K gradient", new javax.microedition.lcdui.Item[] {
                get_plK(),
                        get_plOsm(),
                        get_uk(),
                        get_uOsm(),
                        get_result()
            });
            transKGradForm.addCommand(get_backCommand1());
            transKGradForm.setCommandListener(this);
        }
        return transKGradForm;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for plK component and should be called instead of accessing plK field directly.
     * @return Instance for plK component
     **/
    private javax.microedition.lcdui.TextField get_plK() {
        if (plK == null) {
            plK = new javax.microedition.lcdui.TextField("Pl K [mmol/L]", "", 20, 0x0);
        }
        return plK;
    }
    
    /**
     * This method returns instance for plOsm component and should be called instead of accessing plOsm field directly.
     * @return Instance for plOsm component
     **/
    private javax.microedition.lcdui.TextField get_plOsm() {
        if (plOsm == null) {
            plOsm = new javax.microedition.lcdui.TextField("Pl osm [mosm/kg]", "", 20, 0x0);
        }
        return plOsm;
    }
    
    /**
     * This method returns instance for uk component and should be called instead of accessing uk field directly.
     * @return Instance for uk component
     **/
    private javax.microedition.lcdui.TextField get_uk() {
        if (uk == null) {
            uk = new javax.microedition.lcdui.TextField("U K [mmol/L]", "", 20, 0x0);
        }
        return uk;
    }
    
    /**
     * This method returns instance for uOsm component and should be called instead of accessing uOsm field directly.
     * @return Instance for uOsm component
     **/
    private javax.microedition.lcdui.TextField get_uOsm() {
        if (uOsm == null) {
            uOsm = new javax.microedition.lcdui.TextField("U osm [mosm/kg]", "", 20, 0x0);
        }
        return uOsm;
    }
    
    /**
     * This method returns instance for result component and should be called instead of accessing result field directly.
     * @return Instance for result component
     **/
    private javax.microedition.lcdui.StringItem get_result() {
        if (result == null) {
            result = new javax.microedition.lcdui.StringItem("T.T.K.G. =", "");
        }
        return result;
    }
    
    javax.microedition.lcdui.Form transKGradForm;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.TextField plK;
    javax.microedition.lcdui.TextField plOsm;
    javax.microedition.lcdui.TextField uk;
    javax.microedition.lcdui.TextField uOsm;
    javax.microedition.lcdui.StringItem result;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_transKGradForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        /*
        if (!allItemsValid()) {
            get_result().setText("<all items must be non-empty and valid>");
        } else {
            String _uk = get_uk().getString();
            String _uosm = get_uOsm().getString();
            String _posm = get_plOsm().getString();
            String _pk = get_plK().getString();
            
            get_result()new Float(_uk).div(new Float(_uosm).div(_posm)).div(_pk)
        }
         **/
    }
}
