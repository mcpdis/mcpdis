/*
 * OsmoticGapStool.java
 *
 * Created on March 9, 2006, 6:06 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;
/**
 *
 * @author user
 */
public class OsmoticGapStool extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of OsmoticGapStool */
    public OsmoticGapStool() {
    }

    private Persistence.FormulaValue get_formulaValue() {
        return new Persistence.FormulaValue("Osmotic Gap Stool [mosm/kg]", get_result().getText());
    }
    
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_osmoticGapForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == osmoticGapForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | osmoticGapForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            } else if (command == saveCommand) {
// For adding user code into this block, select "Design | Screens | osmoticGapForm [Form] | Assigned Commands | saveCommand" item in the inspector and invoke property editor on Action property in Properties window.
                Persistence.PatientSuiteDispatcher.invoke(this, get_osmoticGapForm(), get_formulaValue());
            }
        }
    }
    
    /**
     * This method returns instance for osmoticGapForm component and should be called instead of accessing osmoticGapForm field directly.
     * @return Instance for osmoticGapForm component
     **/
    private javax.microedition.lcdui.Form get_osmoticGapForm() {
        if (osmoticGapForm == null) {
            osmoticGapForm = new javax.microedition.lcdui.Form("Osmotic Gap (stool)", new javax.microedition.lcdui.Item[] {
                get_stoolNa(),
                        get_stoolK(),
                        get_piOsmolality(),
                        get_result()
            });
            osmoticGapForm.addCommand(get_backCommand1());
            osmoticGapForm.addCommand(get_saveCommand());
            osmoticGapForm.setCommandListener(this);
        }
        return osmoticGapForm;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for stoolNa component and should be called instead of accessing stoolNa field directly.
     * @return Instance for stoolNa component
     **/
    private javax.microedition.lcdui.TextField get_stoolNa() {
        if (stoolNa == null) {
            stoolNa = new javax.microedition.lcdui.TextField("Stool Na [mmol/L]", "", 20, 0x0);
        }
        return stoolNa;
    }
    
    /**
     * This method returns instance for stoolK component and should be called instead of accessing stoolK field directly.
     * @return Instance for stoolK component
     **/
    private javax.microedition.lcdui.TextField get_stoolK() {
        if (stoolK == null) {
            stoolK = new javax.microedition.lcdui.TextField("Stool K [mmol/L]", "", 20, 0x0);
        }
        return stoolK;
    }
    
    /**
     * This method returns instance for piOsmolality component and should be called instead of accessing piOsmolality field directly.
     * @return Instance for piOsmolality component
     **/
    private javax.microedition.lcdui.TextField get_piOsmolality() {
        if (piOsmolality == null) {
            piOsmolality = new javax.microedition.lcdui.TextField("PI. osmolality [mosm/kg]", "", 20, 0x0);
        }
        return piOsmolality;
    }
    
    /**
     * This method returns instance for result component and should be called instead of accessing result field directly.
     * @return Instance for result component
     **/
    private javax.microedition.lcdui.StringItem get_result() {
        if (result == null) {
            result = new javax.microedition.lcdui.StringItem("Osm. gap [mosm/kg] =", "");
        }
        return result;
    }
    
    /**
     * This method returns instance for saveCommand component and should be called instead of accessing saveCommand field directly.
     * @return Instance for saveCommand component
     **/
    private javax.microedition.lcdui.Command get_saveCommand() {
        if (saveCommand == null) {
            saveCommand = new javax.microedition.lcdui.Command("Save", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return saveCommand;
    }
    
    javax.microedition.lcdui.Form osmoticGapForm;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.TextField stoolNa;
    javax.microedition.lcdui.TextField stoolK;
    javax.microedition.lcdui.TextField piOsmolality;
    javax.microedition.lcdui.StringItem result;
    javax.microedition.lcdui.Command saveCommand;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_osmoticGapForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        if (!allItemsValid()) {
            get_result().setText("<all items must be non-empty and valid>");
        } else {
            String stoolNa = get_stoolNa().getString();
            String stoolK = get_stoolK().getString();
            String plOsm = get_piOsmolality().getString();
            
            get_result().setText(new Float(plOsm).sub(new Float("2").mul(new Float(stoolNa).add(stoolK))).format(2));
        }
    }
 
    private boolean allItemsValid() {
        try {
           MicroFloat.parseFloat(get_stoolK().getString());
           MicroFloat.parseFloat(get_stoolNa().getString());
           MicroFloat.parseFloat(get_piOsmolality().getString());
           return true;
        } catch (Exception e) {
           return false;
        }
    }
}
