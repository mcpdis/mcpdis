/*
 * LDLCholesterol.java
 *
 * Created on March 9, 2006, 4:58 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;

/**
 *
 * @author user
 */
public class LDLCholesterol extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of LDLCholesterol */
    public LDLCholesterol() {
    }

    private Persistence.FormulaValue get_formulaValue() {
        return new Persistence.FormulaValue("LDL Cholesterol [mg/dL]", get_ldlResult().getText());
    }
    
    
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_ldlCholesterolForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == ldlCholesterolForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | ldlCholesterolForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            } else if (command == saveCommand) {
// For adding user code into this block, select "Design | Screens | ldlCholesterolForm [Form] | Assigned Commands | saveCommand" item in the inspector and invoke property editor on Action property in Properties window.
                Persistence.PatientSuiteDispatcher.invoke(this, get_ldlCholesterolForm(), get_formulaValue());
            }
        }
    }
    
    /**
     * This method returns instance for ldlCholesterolForm component and should be called instead of accessing ldlCholesterolForm field directly.
     * @return Instance for ldlCholesterolForm component
     **/
    private javax.microedition.lcdui.Form get_ldlCholesterolForm() {
        if (ldlCholesterolForm == null) {
            ldlCholesterolForm = new javax.microedition.lcdui.Form("LDL Cholesterol", new javax.microedition.lcdui.Item[] {
                get_totalCholesterol(),
                        get_hdl(),
                        get_triglycerides(),
                        get_vldlResult(),
                        get_ldlResult()
            });
            ldlCholesterolForm.addCommand(get_backCommand1());
            ldlCholesterolForm.addCommand(get_saveCommand());
            ldlCholesterolForm.setCommandListener(this);
        }
        return ldlCholesterolForm;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for totalCholesterol component and should be called instead of accessing totalCholesterol field directly.
     * @return Instance for totalCholesterol component
     **/
    private javax.microedition.lcdui.TextField get_totalCholesterol() {
        if (totalCholesterol == null) {
            totalCholesterol = new javax.microedition.lcdui.TextField("Total Cholesterol [mg/dL]", "", 20, 0x0);
        }
        return totalCholesterol;
    }
    
    /**
     * This method returns instance for hdl component and should be called instead of accessing hdl field directly.
     * @return Instance for hdl component
     **/
    private javax.microedition.lcdui.TextField get_hdl() {
        if (hdl == null) {
            hdl = new javax.microedition.lcdui.TextField("HDL [mg/dL]", "", 20, 0x0);
        }
        return hdl;
    }
    
    /**
     * This method returns instance for triglycerides component and should be called instead of accessing triglycerides field directly.
     * @return Instance for triglycerides component
     **/
    private javax.microedition.lcdui.TextField get_triglycerides() {
        if (triglycerides == null) {
            triglycerides = new javax.microedition.lcdui.TextField("Triglycerides [mg/dL]", "", 20, 0x0);
        }
        return triglycerides;
    }
    
    /**
     * This method returns instance for vldlResult component and should be called instead of accessing vldlResult field directly.
     * @return Instance for vldlResult component
     **/
    private javax.microedition.lcdui.StringItem get_vldlResult() {
        if (vldlResult == null) {
            vldlResult = new javax.microedition.lcdui.StringItem("VLDL [mg/dL] =", "");
        }
        return vldlResult;
    }
    
    /**
     * This method returns instance for ldlResult component and should be called instead of accessing ldlResult field directly.
     * @return Instance for ldlResult component
     **/
    private javax.microedition.lcdui.StringItem get_ldlResult() {
        if (ldlResult == null) {
            ldlResult = new javax.microedition.lcdui.StringItem("LDL [mg/dL] = ", "");
        }
        return ldlResult;
    }
    
    /**
     * This method returns instance for saveCommand component and should be called instead of accessing saveCommand field directly.
     * @return Instance for saveCommand component
     **/
    private javax.microedition.lcdui.Command get_saveCommand() {
        if (saveCommand == null) {
            saveCommand = new javax.microedition.lcdui.Command("Save", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return saveCommand;
    }
    
    javax.microedition.lcdui.Form ldlCholesterolForm;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.TextField totalCholesterol;
    javax.microedition.lcdui.TextField hdl;
    javax.microedition.lcdui.TextField triglycerides;
    javax.microedition.lcdui.StringItem vldlResult;
    javax.microedition.lcdui.StringItem ldlResult;
    javax.microedition.lcdui.Command saveCommand;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_ldlCholesterolForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        String result;
        if (!allItemsValid()) {
            result = "<all items must be valid and non empty>";
        } else {
            if (new Float(get_triglycerides().getString()).lessThan("4")) {
                INumeric vldl = new Float(get_triglycerides().getString()).div("5");
                String tot_chol = get_totalCholesterol().getString();
                String hdl = get_hdl().getString();
                result = new Float(tot_chol).sub(vldl).sub(hdl).format(2);
                get_vldlResult().setText(vldl.format(2));
            } else {
                result = "<Triglyceride must be less than 4>";
            }
        }
        get_ldlResult().setText(result);
    }
    
    private boolean allItemsValid() {
        try {
            MicroFloat.parseFloat(get_totalCholesterol().getString());
            MicroFloat.parseFloat(get_triglycerides().getString());
            MicroFloat.parseFloat(get_hdl().getString());
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
