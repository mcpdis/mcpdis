/*
 * BasalEnergyExpenditure.java
 *
 * Created on March 7, 2006, 10:04 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;


/**
 *
 * @author user
 */
public class BasalEnergyExpenditure extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of BasalEnergyExpenditure */
    public BasalEnergyExpenditure() {
    }
    
    private Persistence.FormulaValue get_formulaValue() {
        return new Persistence.FormulaValue("Basal Energy Expenditure [kcal]", get_beeResult().getText());
    }
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_beeForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == beeForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | beeForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            } else if (command == saveCommand) {
// For adding user code into this block, select "Design | Screens | beeForm [Form] | Assigned Commands | saveCommand" item in the inspector and invoke property editor on Action property in Properties window.
                Persistence.PatientSuiteDispatcher.invoke(this, get_beeForm(), get_formulaValue());
            }
        }
    }
    
    /**
     * This method returns instance for beeForm component and should be called instead of accessing beeForm field directly.
     * @return Instance for beeForm component
     **/
    private javax.microedition.lcdui.Form get_beeForm() {
        if (beeForm == null) {
            beeForm = new javax.microedition.lcdui.Form("Basal Expenditure Energy", new javax.microedition.lcdui.Item[] {
                get_age(),
                        get_weight(),
                        get_height(),
                        get_gender(),
                        get_beeResult()
            });
            beeForm.addCommand(get_backCommand1());
            beeForm.addCommand(get_saveCommand());
            beeForm.setCommandListener(this);
        }
        return beeForm;
    }
    
    /**
     * This method returns instance for weight component and should be called instead of accessing weight field directly.
     * @return Instance for weight component
     **/
    private javax.microedition.lcdui.TextField get_weight() {
        if (weight == null) {
            weight = new javax.microedition.lcdui.TextField("Weight [kg]", "", 4, 0x0);
        }
        return weight;
    }
    
    /**
     * This method returns instance for height component and should be called instead of accessing height field directly.
     * @return Instance for height component
     **/
    private javax.microedition.lcdui.TextField get_height() {
        if (height == null) {
            height = new javax.microedition.lcdui.TextField("Height [cm]", "", 4, 0x0);
        }
        return height;
    }
    
    /**
     * This method returns instance for gender component and should be called instead of accessing gender field directly.
     * @return Instance for gender component
     **/
    private javax.microedition.lcdui.ChoiceGroup get_gender() {
        if (gender == null) {
            gender = new javax.microedition.lcdui.ChoiceGroup("Gender", javax.microedition.lcdui.Choice.EXCLUSIVE, new java.lang.String[] {
                "Male",
                        "Female"
            }, new javax.microedition.lcdui.Image[] {
                null,
                        null
            });
            gender.setSelectedFlags(new boolean[] {
                true,
                        false
            });
        }
        return gender;
    }
    
    /**
     * This method returns instance for beeResult component and should be called instead of accessing beeResult field directly.
     * @return Instance for beeResult component
     **/
    private javax.microedition.lcdui.StringItem get_beeResult() {
        if (beeResult == null) {
            beeResult = new javax.microedition.lcdui.StringItem("B.E.E. [kcal] =", "");
        }
        return beeResult;
    }
    
    /**
     * This method returns instance for age component and should be called instead of accessing age field directly.
     * @return Instance for age component
     **/
    private javax.microedition.lcdui.TextField get_age() {
        if (age == null) {
            age = new javax.microedition.lcdui.TextField("Age [yrs]", "", 3, 0x2);
        }
        return age;
    }
    
    /**
     * This method returns instance for cancelCommand1 component and should be called instead of accessing cancelCommand1 field directly.
     * @return Instance for cancelCommand1 component
     **/
    private javax.microedition.lcdui.Command get_cancelCommand1() {
        if (cancelCommand1 == null) {
            cancelCommand1 = new javax.microedition.lcdui.Command("Cancel", javax.microedition.lcdui.Command.CANCEL, 1);
        }
        return cancelCommand1;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for saveCommand component and should be called instead of accessing saveCommand field directly.
     * @return Instance for saveCommand component
     **/
    private javax.microedition.lcdui.Command get_saveCommand() {
        if (saveCommand == null) {
            saveCommand = new javax.microedition.lcdui.Command("Save", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return saveCommand;
    }
    
    javax.microedition.lcdui.Form beeForm;
    javax.microedition.lcdui.TextField weight;
    javax.microedition.lcdui.TextField height;
    javax.microedition.lcdui.ChoiceGroup gender;
    javax.microedition.lcdui.StringItem beeResult;
    javax.microedition.lcdui.TextField age;
    javax.microedition.lcdui.Command cancelCommand1;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.Command saveCommand;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_beeForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }

    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        if (!allItemsValid()) {
            get_beeResult().setText("<input all fields and make sure they are valid>");
        } else {
            int selectedGender = get_gender().getSelectedIndex();
            
            String result;
            if (selectedGender == 0) {
                result = calculateForMale();
            } else {
                result = calculateForFemale();
            }
                
            get_beeResult().setText(result);
        }
    }
    
    private boolean allItemsValid() {
        try {
            MicroFloat.parseFloat(get_age().getString());
            MicroFloat.parseFloat(get_weight().getString());
            MicroFloat.parseFloat(get_height().getString());
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    private String calculateForMale() {
        INumeric weightMult = new Float("13.7").mul(get_weight().getString());
        INumeric heightMult = new Float("5").mul(get_height().getString());
        INumeric ageMult = new Float("6.8").mul(get_age().getString());
        
        return new Float("66").add(weightMult).add(heightMult).sub(ageMult).format(2);
    }
    
    private String calculateForFemale() {
        INumeric weightMult = new Float("9.6").mul(get_weight().getString());
        INumeric heightMult = new Float("1.8").mul(get_height().getString());
        INumeric ageMult = new Float("4.7").mul(get_age().getString());
        
        return new Float("655").add(weightMult).add(heightMult).sub(ageMult).format(2);
    }
}
