/*
 * O2TankRemainingTime.java
 *
 * Created on March 9, 2006, 5:47 PM
 */

package Formulas;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

import net.dclausen.microfloat.*;
/**
 *
 * @author user
 */
public class O2TankRemainingTime extends MIDlet 
        implements javax.microedition.lcdui.CommandListener,
                   javax.microedition.lcdui.ItemStateListener {
    
    /** Creates a new instance of O2TankRemainingTime */
    public O2TankRemainingTime() {
    }

    private Persistence.FormulaValue get_formulaValue() {
        return new Persistence.FormulaValue("O2 Tank Remaining Time [min]", get_result().getText());
    }
    
// --- This section is auto-generated by NetBeans IDE. Do not modify or you may lose your changes.//<editor-fold id="MVDMethods" defaultstate="collapsed" desc="This section is auto-generated by NetBeans IDE.">//GEN-BEGIN:MVDMethods
    /**
     * This method initializes UI of the application.
     */
    private void initialize() {
// For adding user code into this block, select "Design" item in the inspector and invoke property editor on Action property in Properties window.
        javax.microedition.lcdui.Display.getDisplay(this).setCurrent(get_O2trtForm());
    }
    
    /**
     * Called by the system to indicate that a command has been invoked on a particular displayable.
     * @param command the Command that ws invoked
     * @param displayable the Displayable on which the command was invoked
     **/
    public void commandAction(javax.microedition.lcdui.Command command, javax.microedition.lcdui.Displayable displayable) {
        if (displayable == O2trtForm) {
            if (command == backCommand1) {
// For adding user code into this block, select "Design | Screens | O2trtForm [Form] | Assigned Commands | backCommand1" item in the inspector and invoke property editor on Action property in Properties window.
                javax.microedition.lcdui.Display.getDisplay(this).setCurrent(null);
                destroyApp(true);
                notifyDestroyed();
            } else if (command == saveCommand) {
// For adding user code into this block, select "Design | Screens | O2trtForm [Form] | Assigned Commands | saveCommand" item in the inspector and invoke property editor on Action property in Properties window.
                Persistence.PatientSuiteDispatcher.invoke(this, get_O2trtForm(), get_formulaValue());
            }
        }
    }
    
    /**
     * This method returns instance for O2trtForm component and should be called instead of accessing O2trtForm field directly.
     * @return Instance for O2trtForm component
     **/
    private javax.microedition.lcdui.Form get_O2trtForm() {
        if (O2trtForm == null) {
            O2trtForm = new javax.microedition.lcdui.Form("O2 Tank remaining time", new javax.microedition.lcdui.Item[] {
                get_tankPressure(),
                        get_tankVolume(),
                        get_flowRate(),
                        get_result()
            });
            O2trtForm.addCommand(get_backCommand1());
            O2trtForm.addCommand(get_saveCommand());
            O2trtForm.setCommandListener(this);
        }
        return O2trtForm;
    }
    
    /**
     * This method returns instance for backCommand1 component and should be called instead of accessing backCommand1 field directly.
     * @return Instance for backCommand1 component
     **/
    private javax.microedition.lcdui.Command get_backCommand1() {
        if (backCommand1 == null) {
            backCommand1 = new javax.microedition.lcdui.Command("Back", javax.microedition.lcdui.Command.BACK, 1);
        }
        return backCommand1;
    }
    
    /**
     * This method returns instance for tankPressure component and should be called instead of accessing tankPressure field directly.
     * @return Instance for tankPressure component
     **/
    private javax.microedition.lcdui.TextField get_tankPressure() {
        if (tankPressure == null) {
            tankPressure = new javax.microedition.lcdui.TextField("Tank pressure [bar]", "", 20, 0x0);
        }
        return tankPressure;
    }
    
    /**
     * This method returns instance for tankVolume component and should be called instead of accessing tankVolume field directly.
     * @return Instance for tankVolume component
     **/
    private javax.microedition.lcdui.TextField get_tankVolume() {
        if (tankVolume == null) {
            tankVolume = new javax.microedition.lcdui.TextField("Tank volume [L]", "", 20, 0x0);
        }
        return tankVolume;
    }
    
    /**
     * This method returns instance for flowRate component and should be called instead of accessing flowRate field directly.
     * @return Instance for flowRate component
     **/
    private javax.microedition.lcdui.TextField get_flowRate() {
        if (flowRate == null) {
            flowRate = new javax.microedition.lcdui.TextField("Flow rate [L/min]", "", 20, 0x0);
        }
        return flowRate;
    }
    
    /**
     * This method returns instance for result component and should be called instead of accessing result field directly.
     * @return Instance for result component
     **/
    private javax.microedition.lcdui.StringItem get_result() {
        if (result == null) {
            result = new javax.microedition.lcdui.StringItem("Time left [min] =", "");
        }
        return result;
    }
    
    /**
     * This method returns instance for saveCommand component and should be called instead of accessing saveCommand field directly.
     * @return Instance for saveCommand component
     **/
    private javax.microedition.lcdui.Command get_saveCommand() {
        if (saveCommand == null) {
            saveCommand = new javax.microedition.lcdui.Command("Save", javax.microedition.lcdui.Command.ITEM, 1);
        }
        return saveCommand;
    }
    
    javax.microedition.lcdui.Form O2trtForm;
    javax.microedition.lcdui.Command backCommand1;
    javax.microedition.lcdui.TextField tankPressure;
    javax.microedition.lcdui.TextField tankVolume;
    javax.microedition.lcdui.TextField flowRate;
    javax.microedition.lcdui.StringItem result;
    javax.microedition.lcdui.Command saveCommand;
// --- This is the end of auto-generated section.//</editor-fold>//GEN-END:MVDMethods
    
    public void startApp() {
        initialize();
        get_O2trtForm().setItemStateListener(this);
    }
    
    public void pauseApp() {
    }
    
    public void destroyApp(boolean unconditional) {
    }
    
    public void itemStateChanged(javax.microedition.lcdui.Item item) {
        if (!allItemsValid()) {
            get_result().setText("<all fields must be valid and non-empty>");
        } else {
            String vol = get_tankVolume().getString();
            String press = get_tankPressure().getString();
            String flow = get_flowRate().getString();
            
            get_result().setText(new Float(vol).mul(press).div(flow).format(2));
        }
    }
    
    private boolean allItemsValid() {
        try {
            MicroFloat.parseFloat(get_flowRate().getString());
            MicroFloat.parseFloat(get_tankPressure().getString());
            MicroFloat.parseFloat(get_tankVolume().getString());
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
